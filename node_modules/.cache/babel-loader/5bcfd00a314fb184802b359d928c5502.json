{"ast":null,"code":"export const CREATE_ROLE_INITIAL = 'CREATE_ROLE_INITIAL';\nexport const CREATE_ROLE_REQUEST = 'CREATE_ROLE_REQUEST';\nexport const CREATE_ROLE_SUCCESS = 'CREATE_ROLE_SUCCESS';\nexport const CREATE_ROLE_FAILURE = 'CREATE_ROLE_FAILURE';\nexport const FETCH_ROLES_REQUEST = 'FETCH_ROLES_REQUEST';\nexport const FETCH_ROLES_SUCCESS = 'FETCH_ROLES_SUCCESS';\nexport const FETCH_ROLES_FAILURE = 'FETCH_ROLES_FAILURE';\n\nfunction createRoleInitial() {\n  return {\n    type: CREATE_ROLE_INITIAL,\n    isFetching: false\n  };\n}\n\nfunction requestCreateRole(role) {\n  return {\n    type: CREATE_ROLE_REQUEST,\n    isFetching: true,\n    role\n  };\n}\n\nfunction createRoleSuccess(role) {\n  return {\n    type: CREATE_ROLE_SUCCESS,\n    isFetching: false,\n    role\n  };\n}\n\nfunction createRoleError(message) {\n  return {\n    type: CREATE_ROLE_FAILURE,\n    isFetching: false,\n    message\n  };\n}\n\nfunction requestFetchRoles() {\n  return {\n    type: FETCH_ROLES_REQUEST,\n    isFetching: true\n  };\n}\n\nfunction fetchRolesSuccess(roles) {\n  return {\n    type: FETCH_ROLES_SUCCESS,\n    isFetching: false,\n    roles\n  };\n}\n\nfunction fetchRolesError(message) {\n  return {\n    type: FETCH_ROLES_FAILURE,\n    isFetching: false,\n    message\n  };\n}\n\nexport function createRole(roleData) {\n  const config = {\n    method: 'post',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Origin': '*'\n    },\n    body: JSON.stringify({\n      query: `mutation {\n                addRole(name: \"${roleData.name}\")\n                {\n                  id,\n                  name\n                }\n              }`\n    }) //credentials: 'include',\n\n  };\n  return dispatch => {\n    // We dispatch requestCreatePost to kickoff the call to the API\n    dispatch(requestCreateRole(roleData));\n\n    if (process.env.NODE_ENV === \"development\") {\n      return fetch('http://127.0.0.1:8000/api/v1/role/store', config).then(response => response.json().then(role => ({\n        role,\n        response\n      }))).then(({\n        role,\n        response\n      }) => {\n        if (!response.ok) {\n          // If there was a problem, we want to\n          // dispatch the error condition\n          dispatch(createRoleError(role.message));\n          return Promise.reject(role);\n        } // Dispatch the success action\n\n\n        dispatch(createRoleSuccess(role));\n        setTimeout(() => {\n          dispatch(createRoleInitial());\n        }, 5000);\n        return Promise.resolve(role);\n      }).catch(err => console.error('Error: ', err));\n    } else {\n      dispatch(createRoleError(''));\n      return Promise.reject();\n    }\n  };\n} // export function fetchRoles() {\n//   const config = {\n//     method: 'post',\n//     headers: {\n//       Accept: 'application/json',\n//       'Content-Type': 'application/json',\n//     },\n//     body: JSON.stringify({\n//       query: '{roles{id,name,updatedAt}}',\n//     }),\n//     credentials: 'include',\n//   };\n//   return dispatch => {\n//     dispatch(requestFetchPosts());\n//     return fetch('/graphql', config)\n//       .then(response =>\n//         response.json().then(responseJson => ({\n//           roles: responseJson.data.roles,\n//           responseJson,\n//         })),\n//       )\n//       .then(({ roles, responseJson }) => {\n//         if (!responseJson.data.roles) {\n//           // If there was a problem, we want to\n//           // dispatch the error condition\n//           dispatch(fetchRolesError(roles.message));\n//           return Promise.reject(roles);\n//         }\n//         // Dispatch the success action\n//         dispatch(fetchRolesSuccess(roles));\n//         return Promise.resolve(roles);\n//       })\n//       .catch(err => console.error('Error: ', err));\n//   };\n// }","map":{"version":3,"sources":["/opt/lampp/htdocs/react-dashboard-master/src/actions/roles.js"],"names":["CREATE_ROLE_INITIAL","CREATE_ROLE_REQUEST","CREATE_ROLE_SUCCESS","CREATE_ROLE_FAILURE","FETCH_ROLES_REQUEST","FETCH_ROLES_SUCCESS","FETCH_ROLES_FAILURE","createRoleInitial","type","isFetching","requestCreateRole","role","createRoleSuccess","createRoleError","message","requestFetchRoles","fetchRolesSuccess","roles","fetchRolesError","createRole","roleData","config","method","headers","Accept","body","JSON","stringify","query","name","dispatch","process","env","NODE_ENV","fetch","then","response","json","ok","Promise","reject","setTimeout","resolve","catch","err","console","error"],"mappings":"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","sourcesContent":["export const CREATE_ROLE_INITIAL = 'CREATE_ROLE_INITIAL';\nexport const CREATE_ROLE_REQUEST = 'CREATE_ROLE_REQUEST';\nexport const CREATE_ROLE_SUCCESS = 'CREATE_ROLE_SUCCESS';\nexport const CREATE_ROLE_FAILURE = 'CREATE_ROLE_FAILURE';\nexport const FETCH_ROLES_REQUEST = 'FETCH_ROLES_REQUEST';\nexport const FETCH_ROLES_SUCCESS = 'FETCH_ROLES_SUCCESS';\nexport const FETCH_ROLES_FAILURE = 'FETCH_ROLES_FAILURE';\n\nfunction createRoleInitial() {\n  return {\n    type: CREATE_ROLE_INITIAL,\n    isFetching: false,\n  };\n}\n\nfunction requestCreateRole(role) {\n  return {\n    type: CREATE_ROLE_REQUEST,\n    isFetching: true,\n    role,\n  };\n}\n\nfunction createRoleSuccess(role) {\n  return {\n    type: CREATE_ROLE_SUCCESS,\n    isFetching: false,\n    role,\n  };\n}\n\nfunction createRoleError(message) {\n  return {\n    type: CREATE_ROLE_FAILURE,\n    isFetching: false,\n    message,\n  };\n}\n\nfunction requestFetchRoles() {\n  return {\n    type: FETCH_ROLES_REQUEST,\n    isFetching: true,\n  };\n}\n\nfunction fetchRolesSuccess(roles) {\n  return {\n    type: FETCH_ROLES_SUCCESS,\n    isFetching: false,\n    roles,\n  };\n}\n\nfunction fetchRolesError(message) {\n  return {\n    type: FETCH_ROLES_FAILURE,\n    isFetching: false,\n    message,\n  };\n}\n\nexport function createRole(roleData) {\n  const config = {\n    method: 'post',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Origin': '*',\n    },\n    body: JSON.stringify({\n      query: `mutation {\n                addRole(name: \"${roleData.name}\")\n                {\n                  id,\n                  name\n                }\n              }`,\n    }),\n    //credentials: 'include',\n  };\n\n  return dispatch => {\n    // We dispatch requestCreatePost to kickoff the call to the API\n    dispatch(requestCreateRole(roleData));\n    if(process.env.NODE_ENV === \"development\") {\n    return fetch('http://127.0.0.1:8000/api/v1/role/store', config)\n      .then(response => response.json().then(role => ({ role, response })))\n      .then(({ role, response }) => {\n        if (!response.ok) {\n          // If there was a problem, we want to\n          // dispatch the error condition\n          dispatch(createRoleError(role.message));\n          return Promise.reject(role);\n        }\n        // Dispatch the success action\n        dispatch(createRoleSuccess(role));\n        setTimeout(() => {\n          dispatch(createRoleInitial());\n        }, 5000);\n        return Promise.resolve(role);\n      })\n      .catch(err => console.error('Error: ', err));\n    } else {\n      dispatch(createRoleError(''));\n      return Promise.reject();\n    }\n  };\n}\n\n// export function fetchRoles() {\n//   const config = {\n//     method: 'post',\n//     headers: {\n//       Accept: 'application/json',\n//       'Content-Type': 'application/json',\n//     },\n//     body: JSON.stringify({\n//       query: '{roles{id,name,updatedAt}}',\n//     }),\n//     credentials: 'include',\n//   };\n\n//   return dispatch => {\n//     dispatch(requestFetchPosts());\n\n//     return fetch('/graphql', config)\n//       .then(response =>\n//         response.json().then(responseJson => ({\n//           roles: responseJson.data.roles,\n//           responseJson,\n//         })),\n//       )\n//       .then(({ roles, responseJson }) => {\n//         if (!responseJson.data.roles) {\n//           // If there was a problem, we want to\n//           // dispatch the error condition\n//           dispatch(fetchRolesError(roles.message));\n//           return Promise.reject(roles);\n//         }\n//         // Dispatch the success action\n//         dispatch(fetchRolesSuccess(roles));\n//         return Promise.resolve(roles);\n//       })\n//       .catch(err => console.error('Error: ', err));\n//   };\n// }\n"]},"metadata":{},"sourceType":"module"}