{"ast":null,"code":"import _defineProperty from \"/opt/lampp/htdocs/react-dashboard-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/opt/lampp/htdocs/react-dashboard-master/src/pages/charts/charts/PercentAreaChart.js\";\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { AreaChart, Area, XAxis, YAxis, Tooltip, ResponsiveContainer } from 'recharts';\n\nclass PercentAreaChart extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"getPercent\", (value, total) => {\n      const ratio = total > 0 ? value / total : 0;\n      return this.toPercent(ratio, 2);\n    });\n\n    _defineProperty(this, \"toPercent\", (decimal, fixed = 0) => `${(decimal * 100).toFixed(fixed)}%`);\n\n    _defineProperty(this, \"renderTooltipContent\", o => {\n      // eslint-disable-line\n      const {\n        payload,\n        label\n      } = o;\n      const total = payload.reduce((result, entry) => result + entry.value, 0);\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"customized-tooltip-content\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        className: \"total\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 9\n        }\n      }, `${label} (Total: ${total})`), /*#__PURE__*/React.createElement(\"ul\", {\n        className: \"list\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 9\n        }\n      }, payload.map((entry, index) =>\n      /*#__PURE__*/\n\n      /* eslint-disable */\n      React.createElement(\"li\", {\n        key: `item-${index}`,\n        style: {\n          color: entry.color\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 15\n        }\n      }, `${entry.name}: ${entry.value}(${this.getPercent(entry.value, total)})`)\n      /* eslint-enable */\n      )));\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(ResponsiveContainer, {\n      height: 300,\n      width: \"100%\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(AreaChart, {\n      data: this.props.data,\n      stackOffset: \"expand\",\n      margin: {\n        top: 20,\n        left: -15\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"month\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(YAxis, {\n      tickFormatter: this.toPercent,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Tooltip, {\n      content: this.renderTooltipContent,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Area, {\n      type: \"monotone\",\n      dataKey: \"uv\",\n      stackId: \"1\",\n      stroke: \"#ffffff\",\n      fill: \"#f3c363\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Area, {\n      type: \"monotone\",\n      dataKey: \"pv\",\n      stackId: \"1\",\n      stroke: \"#ffffff\",\n      fill: \"#1ab394\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Area, {\n      type: \"monotone\",\n      dataKey: \"amt\",\n      stackId: \"1\",\n      stroke: \"#ffffff\",\n      fill: \"#5d80f9\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\n_defineProperty(PercentAreaChart, \"propTypes\", {\n  data: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string,\n    uv: PropTypes.number,\n    pv: PropTypes.number,\n    amt: PropTypes.number\n  })).isRequired\n});\n\nexport default PercentAreaChart;","map":{"version":3,"sources":["/opt/lampp/htdocs/react-dashboard-master/src/pages/charts/charts/PercentAreaChart.js"],"names":["React","PureComponent","PropTypes","AreaChart","Area","XAxis","YAxis","Tooltip","ResponsiveContainer","PercentAreaChart","value","total","ratio","toPercent","decimal","fixed","toFixed","o","payload","label","reduce","result","entry","map","index","color","name","getPercent","render","props","data","top","left","renderTooltipContent","arrayOf","shape","string","uv","number","pv","amt","isRequired"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  AreaChart,\n  Area,\n  XAxis,\n  YAxis,\n  Tooltip,\n  ResponsiveContainer\n} from 'recharts';\n\nclass PercentAreaChart extends PureComponent {\n  static propTypes = {\n    data: PropTypes.arrayOf(PropTypes.shape({\n      name: PropTypes.string,\n      uv: PropTypes.number,\n      pv: PropTypes.number,\n      amt: PropTypes.number,\n    })).isRequired,\n  }\n\n  getPercent = (value, total) => {\n    const ratio = total > 0 ? value / total : 0;\n    \n    return this.toPercent(ratio, 2);\n  };\n\n  toPercent = (decimal, fixed = 0) => `${(decimal * 100).toFixed(fixed)}%`;\n\n  renderTooltipContent = o => { // eslint-disable-line\n    const { payload, label } = o;\n    const total = payload.reduce((result, entry) => (result + entry.value), 0);\n    \n    return (\n      <div className=\"customized-tooltip-content\">\n        <p className=\"total\">{`${label} (Total: ${total})`}</p>\n        <ul className=\"list\">\n          {\n            payload.map((entry, index) => (\n              /* eslint-disable */\n              <li key={`item-${index}`} style={{color: entry.color}}>\n                {`${entry.name}: ${entry.value}(${this.getPercent(entry.value, total)})`}\n              </li>\n              /* eslint-enable */\n            ))\n          }\n        </ul>\n      </div>\n    );\n  };\n\n\trender () {\n  \treturn (\n      <ResponsiveContainer height={300} width='100%'>\n        <AreaChart \n          data={this.props.data} \n          stackOffset=\"expand\"\n          margin={{top: 20, left: -15}} >\n          <XAxis dataKey=\"month\"/>\n          <YAxis tickFormatter={this.toPercent}/>\n          <Tooltip content={this.renderTooltipContent}/>\n          <Area type='monotone' dataKey='uv' stackId=\"1\" stroke='#ffffff' fill='#f3c363' />\n          <Area type='monotone' dataKey='pv' stackId=\"1\" stroke='#ffffff' fill='#1ab394' />\n          <Area type='monotone' dataKey='amt' stackId=\"1\" stroke='#ffffff' fill='#5d80f9' />\n        </AreaChart>\n      </ResponsiveContainer>\n    );\n  }\n}\n\nexport default PercentAreaChart;\n"]},"metadata":{},"sourceType":"module"}