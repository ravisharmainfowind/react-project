{"ast":null,"code":"export const CREATE_ROLE_INITIAL = 'CREATE_ROLE_INITIAL';\nexport const CREATE_ROLE_REQUEST = 'CREATE_ROLE_REQUEST';\nexport const CREATE_ROLE_SUCCESS = 'CREATE_ROLE_SUCCESS';\nexport const CREATE_ROLE_FAILURE = 'CREATE_ROLE_FAILURE';\nexport const FETCH_ROLES_REQUEST = 'FETCH_ROLES_REQUEST';\nexport const FETCH_ROLES_SUCCESS = 'FETCH_ROLES_SUCCESS';\nexport const FETCH_ROLES_FAILURE = 'FETCH_ROLES_FAILURE';\nexport const GET_ROLE_REQUEST = 'GET_ROLE_REQUEST';\nexport const GET_ROLE_SUCCESS = 'GET_ROLE_SUCCESS';\nexport const GET_ROLE_FAILURE = 'GET_ROLE_FAILURE';\nexport const UPDATE_ROLE_REQUEST = 'UPDATE_ROLE_REQUEST';\nexport const UPDATE_ROLE_SUCCESS = 'UPDATE_ROLE_SUCCESS';\nexport const UPDATE_ROLE_FAILURE = 'UPDATE_ROLE_FAILURE';\nexport const DELETE_ROLES_REQUEST = 'DELETE_ROLES_REQUEST';\nexport const DELETE_ROLES_SUCCESS = 'DELETE_ROLES_SUCCESS';\nexport const DELETE_ROLES_FAILURE = 'DELETE_ROLES_FAILURE';\nexport const STATUS_ROLES_REQUEST = 'STATUS_ROLES_REQUEST';\nexport const STATUS_ROLES_SUCCESS = 'STATUS_ROLES_SUCCESS';\nexport const STATUS_ROLES_FAILURE = 'STATUS_ROLES_FAILURE';\n\nfunction createRoleInitial() {\n  return {\n    type: CREATE_ROLE_INITIAL,\n    isFetching: false\n  };\n}\n\nfunction requestCreateRole(role) {\n  return {\n    type: CREATE_ROLE_REQUEST,\n    isFetching: true,\n    role\n  };\n}\n\nfunction createRoleSuccess(role) {\n  return {\n    type: CREATE_ROLE_SUCCESS,\n    isFetching: false,\n    role\n  };\n}\n\nfunction createRoleError(message) {\n  return {\n    type: CREATE_ROLE_FAILURE,\n    isFetching: false,\n    message\n  };\n}\n\nfunction requestGetRole(role) {\n  return {\n    type: GET_ROLE_REQUEST,\n    isFetching: true,\n    role\n  };\n}\n\nfunction getRoleSuccess(roles) {\n  //console.log(role);\n  return {\n    type: GET_ROLE_SUCCESS,\n    isFetching: false,\n    roles\n  };\n}\n\nfunction getRoleError(message) {\n  return {\n    type: GET_ROLE_FAILURE,\n    isFetching: false,\n    message\n  };\n}\n\nfunction requestFetchRole() {\n  return {\n    type: FETCH_ROLES_REQUEST,\n    isFetching: true\n  };\n}\n\nfunction fetchRoleSuccess(role) {\n  return {\n    type: FETCH_ROLES_SUCCESS,\n    isFetching: false,\n    role\n  };\n}\n\nfunction fetchRoleError(message) {\n  return {\n    type: FETCH_ROLES_FAILURE,\n    isFetching: false,\n    message\n  };\n}\n\nfunction requestUpdateRole(role) {\n  return {\n    type: UPDATE_ROLE_REQUEST,\n    isFetching: true,\n    role\n  };\n}\n\nfunction updateRoleSuccess(role) {\n  return {\n    type: UPDATE_ROLE_SUCCESS,\n    isFetching: false,\n    role\n  };\n}\n\nfunction updateRoleError(message) {\n  return {\n    type: UPDATE_ROLE_FAILURE,\n    isFetching: false,\n    message\n  };\n}\n\nfunction requestDeleteRole() {\n  return {\n    type: DELETE_ROLES_REQUEST,\n    isFetching: true\n  };\n}\n\nfunction deleteRoleSuccess(role) {\n  return {\n    type: DELETE_ROLES_SUCCESS,\n    isFetching: false,\n    deleteMessage: role.message,\n    role\n  };\n}\n\nfunction deleteRoleError(message) {\n  return {\n    type: DELETE_ROLES_FAILURE,\n    isFetching: false,\n    message\n  };\n}\n\nfunction requestStatusRole() {\n  return {\n    type: STATUS_ROLES_REQUEST,\n    isFetching: true\n  };\n}\n\nfunction statusRoleSuccess(role) {\n  return {\n    type: STATUS_ROLES_SUCCESS,\n    isFetching: false,\n    statusMessage: role.message,\n    role\n  };\n}\n\nfunction statusRoleError(message) {\n  return {\n    type: STATUS_ROLES_FAILURE,\n    isFetching: false,\n    message\n  };\n}\n\nexport function createRole(roleData) {\n  const config = {\n    method: 'post',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'Access-Control-Allow-Origin': '*'\n    },\n    body: `name=${roleData.name}`\n  };\n  return dispatch => {\n    // We dispatch requestCreatePost to kickoff the call to the API\n    dispatch(requestCreateRole(roleData));\n    return fetch('http://127.0.0.1:8000/api/v1/role/store', config).then(response => response.json().then(role => ({\n      role,\n      response\n    }))).then(({\n      role,\n      response\n    }) => {\n      if (!response.ok) {\n        // If there was a problem, we want to\n        // dispatch the error condition\n        dispatch(createRoleError(role.message));\n        return Promise.reject(role);\n      } // Dispatch the success action\n\n\n      dispatch(createRoleSuccess(role));\n      setTimeout(() => {\n        dispatch(createRoleInitial());\n      }, 5000);\n      return Promise.resolve(role);\n    }).catch(err => console.error('Error: ', err));\n  };\n}\nexport function getRoles() {\n  const config = {\n    method: 'get',\n    headers: {\n      Accept: 'application/json',\n      //'Content-Type': 'application/x-www-form-urlencoded',\n      'Access-Control-Allow-Origin': '*'\n    }\n  };\n  return dispatch => {\n    // We dispatch requestCreatePost to kickoff the call to the API\n    dispatch(requestGetRole());\n    return fetch('http://127.0.0.1:8000/api/v1/role', config).then(response => response.json().then(roles => ({\n      roles,\n      response\n    }))).then(({\n      roles,\n      response\n    }) => {\n      if (!response.ok) {\n        // If there was a problem, we want to\n        // dispatch the error condition\n        dispatch(getRoleError(roles.message));\n        return Promise.reject(roles);\n      } // Dispatch the success action\n\n\n      dispatch(getRoleSuccess(roles));\n      return Promise.resolve(roles);\n    }).catch(err => console.error('Error: ', err));\n  };\n}\nexport function updateRole(roleData) {\n  const config = {\n    method: 'put',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'Access-Control-Allow-Origin': '*'\n    },\n    body: `name=${roleData.name}`\n  };\n  return dispatch => {\n    // We dispatch requestUpdatePost to kickoff the call to the API\n    dispatch(requestUpdateRole(roleData));\n    return fetch('http://127.0.0.1:8000/api/v1/role/' + roleData.id + '/update', config).then(response => response.json().then(role => ({\n      role,\n      response\n    }))).then(({\n      role,\n      response\n    }) => {\n      if (!response.ok) {\n        // If there was a problem, we want to\n        // dispatch the error condition\n        dispatch(updateRoleError(role.message));\n        return Promise.reject(role);\n      } // Dispatch the success action\n\n\n      dispatch(updateRoleSuccess(role));\n      return Promise.resolve(role);\n    }).catch(err => console.error('Error: ', err));\n  };\n}\nexport function fetchRole(roleId) {\n  const config = {\n    method: 'get',\n    headers: {\n      Accept: 'application/json',\n      'Access-Control-Allow-Origin': '*'\n    }\n  };\n  return dispatch => {\n    // We dispatch requestFetchPost to kickoff the call to the API\n    dispatch(requestFetchRole(roleId));\n    return fetch('http://127.0.0.1:8000/api/v1/role/' + roleId.roleId + '/edit', config).then(response => response.json().then(role => ({\n      role,\n      response\n    }))).then(({\n      role,\n      response\n    }) => {\n      if (!response.ok) {\n        // If there was a problem, we want to\n        // dispatch the error condition\n        dispatch(fetchRoleError(role.message));\n        return Promise.reject(role);\n      } // Dispatch the success action\n\n\n      dispatch(fetchRoleSuccess(role.data.role_info));\n      return Promise.resolve(role);\n    }).catch(err => console.error('Error: ', err));\n  };\n}\nexport function deleteRole(roleId) {\n  const config = {\n    method: 'delete',\n    headers: {\n      Accept: 'application/json',\n      'Access-Control-Allow-Origin': '*'\n    }\n  };\n  return dispatch => {\n    // We dispatch requestDeletePost to kickoff the call to the API\n    dispatch(requestDeleteRole(roleId));\n    return fetch('http://127.0.0.1:8000/api/v1/role/' + roleId.roleId + '/delete', config).then(response => response.json().then(role => ({\n      role,\n      response\n    }))).then(({\n      role,\n      response\n    }) => {\n      if (!response.ok) {\n        // If there was a problem, we want to\n        // dispatch the error condition\n        dispatch(deleteRoleError(role.message));\n        return Promise.reject(role);\n      } // Dispatch the success action\n\n\n      dispatch(deleteRoleSuccess(role));\n      return Promise.resolve(role);\n    }).catch(err => console.error('Error: ', err));\n  };\n}","map":{"version":3,"sources":["/opt/lampp/htdocs/react-dashboard-master/src/actions/roles.js"],"names":["CREATE_ROLE_INITIAL","CREATE_ROLE_REQUEST","CREATE_ROLE_SUCCESS","CREATE_ROLE_FAILURE","FETCH_ROLES_REQUEST","FETCH_ROLES_SUCCESS","FETCH_ROLES_FAILURE","GET_ROLE_REQUEST","GET_ROLE_SUCCESS","GET_ROLE_FAILURE","UPDATE_ROLE_REQUEST","UPDATE_ROLE_SUCCESS","UPDATE_ROLE_FAILURE","DELETE_ROLES_REQUEST","DELETE_ROLES_SUCCESS","DELETE_ROLES_FAILURE","STATUS_ROLES_REQUEST","STATUS_ROLES_SUCCESS","STATUS_ROLES_FAILURE","createRoleInitial","type","isFetching","requestCreateRole","role","createRoleSuccess","createRoleError","message","requestGetRole","getRoleSuccess","roles","getRoleError","requestFetchRole","fetchRoleSuccess","fetchRoleError","requestUpdateRole","updateRoleSuccess","updateRoleError","requestDeleteRole","deleteRoleSuccess","deleteMessage","deleteRoleError","requestStatusRole","statusRoleSuccess","statusMessage","statusRoleError","createRole","roleData","config","method","headers","Accept","body","name","dispatch","fetch","then","response","json","ok","Promise","reject","setTimeout","resolve","catch","err","console","error","getRoles","updateRole","id","fetchRole","roleId","data","role_info","deleteRole"],"mappings":"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","sourcesContent":["export const CREATE_ROLE_INITIAL = 'CREATE_ROLE_INITIAL';\nexport const CREATE_ROLE_REQUEST = 'CREATE_ROLE_REQUEST';\nexport const CREATE_ROLE_SUCCESS = 'CREATE_ROLE_SUCCESS';\nexport const CREATE_ROLE_FAILURE = 'CREATE_ROLE_FAILURE';\nexport const FETCH_ROLES_REQUEST = 'FETCH_ROLES_REQUEST';\nexport const FETCH_ROLES_SUCCESS = 'FETCH_ROLES_SUCCESS';\nexport const FETCH_ROLES_FAILURE = 'FETCH_ROLES_FAILURE';\nexport const GET_ROLE_REQUEST    = 'GET_ROLE_REQUEST';\nexport const GET_ROLE_SUCCESS    = 'GET_ROLE_SUCCESS';\nexport const GET_ROLE_FAILURE    = 'GET_ROLE_FAILURE';\nexport const UPDATE_ROLE_REQUEST = 'UPDATE_ROLE_REQUEST';\nexport const UPDATE_ROLE_SUCCESS = 'UPDATE_ROLE_SUCCESS';\nexport const UPDATE_ROLE_FAILURE = 'UPDATE_ROLE_FAILURE';\nexport const DELETE_ROLES_REQUEST = 'DELETE_ROLES_REQUEST';\nexport const DELETE_ROLES_SUCCESS = 'DELETE_ROLES_SUCCESS';\nexport const DELETE_ROLES_FAILURE = 'DELETE_ROLES_FAILURE';\nexport const STATUS_ROLES_REQUEST = 'STATUS_ROLES_REQUEST';\nexport const STATUS_ROLES_SUCCESS = 'STATUS_ROLES_SUCCESS';\nexport const STATUS_ROLES_FAILURE = 'STATUS_ROLES_FAILURE';\n\nfunction createRoleInitial() {\n  return {\n    type: CREATE_ROLE_INITIAL,\n    isFetching: false,\n  };\n}\n\nfunction requestCreateRole(role) {\n  return {\n    type: CREATE_ROLE_REQUEST,\n    isFetching: true,\n    role,\n  };\n}\n\nfunction createRoleSuccess(role) {\n  return {\n    type: CREATE_ROLE_SUCCESS,\n    isFetching: false,\n    role,\n  };\n}\n\nfunction createRoleError(message) {\n  return {\n    type: CREATE_ROLE_FAILURE,\n    isFetching: false,\n    message,\n  };\n}\n\nfunction requestGetRole(role) {\n  return {\n    type: GET_ROLE_REQUEST,\n    isFetching: true,\n    role,\n  };\n}\n\nfunction getRoleSuccess(roles) {\n //console.log(role);\n  return {\n    type: GET_ROLE_SUCCESS,\n    isFetching: false,\n    roles,\n  };\n}\n\nfunction getRoleError(message) {\n  return {\n    type: GET_ROLE_FAILURE,\n    isFetching: false,\n    message,\n  };\n}\n\nfunction requestFetchRole() {\n  return {\n    type: FETCH_ROLES_REQUEST,\n    isFetching: true,\n  };\n}\n\nfunction fetchRoleSuccess(role) {\n  return {\n    type: FETCH_ROLES_SUCCESS,\n    isFetching: false,\n    role,\n  };\n}\n\nfunction fetchRoleError(message) {\n  return {\n    type: FETCH_ROLES_FAILURE,\n    isFetching: false,\n    message,\n  };\n}\n\nfunction requestUpdateRole(role) {\n  return {\n    type: UPDATE_ROLE_REQUEST,\n    isFetching: true,\n    role,\n  };\n}\n\nfunction updateRoleSuccess(role) {\n  return {\n    type: UPDATE_ROLE_SUCCESS,\n    isFetching: false,\n    role,\n  };\n}\n\nfunction updateRoleError(message) {\n  return {\n    type: UPDATE_ROLE_FAILURE,\n    isFetching: false,\n    message,\n  };\n}\n\nfunction requestDeleteRole() {\n  return {\n    type: DELETE_ROLES_REQUEST,\n    isFetching: true,\n  };\n}\n\nfunction deleteRoleSuccess(role) {\n  return {\n    type: DELETE_ROLES_SUCCESS,\n    isFetching: false,\n    deleteMessage:role.message,\n    role,\n  };\n}\n\nfunction deleteRoleError(message) {\n  return {\n    type: DELETE_ROLES_FAILURE,\n    isFetching: false,\n    message,\n  };\n}\n\nfunction requestStatusRole() {\n  return {\n    type: STATUS_ROLES_REQUEST,\n    isFetching: true,\n  };\n}\n\nfunction statusRoleSuccess(role) {\n  return {\n    type: STATUS_ROLES_SUCCESS,\n    isFetching: false,\n    statusMessage:role.message,\n    role,\n  };\n}\n\nfunction statusRoleError(message) {\n  return {\n    type: STATUS_ROLES_FAILURE,\n    isFetching: false,\n    message,\n  };\n}\n\nexport function createRole(roleData) {\n  const config = {\n    method: 'post',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'Access-Control-Allow-Origin': '*',\n    },\n    body: `name=${roleData.name}`,\n  };\n\n  return dispatch => {\n    // We dispatch requestCreatePost to kickoff the call to the API\n    dispatch(requestCreateRole(roleData));\n    \n    return fetch('http://127.0.0.1:8000/api/v1/role/store', config)\n      .then(response => response.json().then(role => ({ role, response })))\n      .then(({ role, response }) => {\n        if (!response.ok) {\n          // If there was a problem, we want to\n          // dispatch the error condition\n          dispatch(createRoleError(role.message));\n          return Promise.reject(role);\n        }\n        // Dispatch the success action\n        dispatch(createRoleSuccess(role));\n        setTimeout(() => {\n          dispatch(createRoleInitial());\n        }, 5000);\n        return Promise.resolve(role);\n      })\n      .catch(err => console.error('Error: ', err));\n    \n  };\n}\n\nexport function getRoles() {\n  const config = {\n    method: 'get',\n    headers: {\n      Accept: 'application/json',\n      //'Content-Type': 'application/x-www-form-urlencoded',\n      'Access-Control-Allow-Origin': '*',\n    },\n  };\n\n  return dispatch => {\n    // We dispatch requestCreatePost to kickoff the call to the API\n    dispatch(requestGetRole());\n    \n    return fetch('http://127.0.0.1:8000/api/v1/role', config)\n      .then(response => response.json().then(roles => ({ roles, response })))\n      .then(({ roles, response }) => {\n        if (!response.ok) {\n          // If there was a problem, we want to\n          // dispatch the error condition\n          dispatch(getRoleError(roles.message));\n          return Promise.reject(roles);\n        }\n        // Dispatch the success action\n        dispatch(getRoleSuccess(roles));\n       \n        return Promise.resolve(roles);\n      })\n      .catch(err => console.error('Error: ', err));\n    \n  };\n}\n\nexport function updateRole(roleData) {\n  const config = {\n    method: 'put',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'Access-Control-Allow-Origin': '*',\n    },\n    body: `name=${roleData.name}`,\n  };\n\n  return dispatch => {\n    // We dispatch requestUpdatePost to kickoff the call to the API\n    dispatch(requestUpdateRole(roleData));\n    \n    return fetch('http://127.0.0.1:8000/api/v1/role/'+roleData.id+'/update', config)\n      .then(response => response.json().then(role => ({ role, response })))\n      .then(({ role, response }) => {\n        if (!response.ok) {\n          // If there was a problem, we want to\n          // dispatch the error condition\n          dispatch(updateRoleError(role.message));\n          return Promise.reject(role);\n        }\n        // Dispatch the success action\n        dispatch(updateRoleSuccess(role));\n       \n        return Promise.resolve(role);\n      })\n      .catch(err => console.error('Error: ', err));\n    \n  };\n}\n\nexport function fetchRole(roleId) {\n  const config = {\n    method: 'get',\n    headers: {\n      Accept: 'application/json',\n      'Access-Control-Allow-Origin': '*',\n    },\n  };\n\n  return dispatch => {\n    // We dispatch requestFetchPost to kickoff the call to the API\n    dispatch(requestFetchRole(roleId));\n    \n    return fetch('http://127.0.0.1:8000/api/v1/role/'+roleId.roleId+'/edit', config)\n      .then(response => response.json().then(role => ({ role, response })))\n      .then(({ role, response }) => {\n        if (!response.ok) {\n          // If there was a problem, we want to\n          // dispatch the error condition\n          dispatch(fetchRoleError(role.message));\n          return Promise.reject(role);\n        }\n        // Dispatch the success action\n        dispatch(fetchRoleSuccess(role.data.role_info));\n    \n        return Promise.resolve(role);\n      })\n      .catch(err => console.error('Error: ', err));\n    \n  };\n}\n\nexport function deleteRole(roleId) {\n  const config = {\n    method: 'delete',\n    headers: {\n      Accept: 'application/json',\n      'Access-Control-Allow-Origin': '*',\n    },\n  };\n\n  return dispatch => {\n    // We dispatch requestDeletePost to kickoff the call to the API\n    dispatch(requestDeleteRole(roleId));\n    \n    return fetch('http://127.0.0.1:8000/api/v1/role/'+roleId.roleId+'/delete', config)\n      .then(response => response.json().then(role => ({ role, response })))\n      .then(({ role, response }) => {\n        if (!response.ok) {\n          // If there was a problem, we want to\n          // dispatch the error condition\n          dispatch(deleteRoleError(role.message));\n          return Promise.reject(role);\n        }\n        // Dispatch the success action\n        dispatch(deleteRoleSuccess(role));\n    \n        return Promise.resolve(role);\n      })\n      .catch(err => console.error('Error: ', err));\n    \n  };\n}"]},"metadata":{},"sourceType":"module"}