{"ast":null,"code":"import appConfig from '../config';\nexport const LOGIN_REQUEST = 'LOGIN_REQUEST';\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nexport const LOGIN_FAILURE = 'LOGIN_FAILURE';\nexport const LOGOUT_REQUEST = 'LOGOUT_REQUEST';\nexport const LOGOUT_SUCCESS = 'LOGOUT_SUCCESS';\nexport const LOGOUT_FAILURE = 'LOGOUT_FAILURE';\n\nfunction requestLogin(creds) {\n  return {\n    type: LOGIN_REQUEST,\n    isFetching: true,\n    isAuthenticated: false,\n    creds\n  };\n}\n\nexport function receiveLogin(user) {\n  return {\n    type: LOGIN_SUCCESS,\n    isFetching: false,\n    isAuthenticated: true,\n    id_token: user.access_token\n  };\n}\nexport function receiveRegister(user) {\n  return {\n    type: REGISTER_SUCCESS,\n    isFetching: false,\n    isAuthenticated: true,\n    id_token: user.access_token\n  };\n}\n\nfunction loginError(message) {\n  return {\n    type: LOGIN_FAILURE,\n    isFetching: false,\n    isAuthenticated: false,\n    message\n  };\n}\n\nfunction registerError(message) {\n  return {\n    type: REGISTER_FAILURE,\n    isFailed: false,\n    message\n  };\n}\n\nfunction requestLogout() {\n  return {\n    type: LOGOUT_REQUEST,\n    isFetching: true,\n    isAuthenticated: true\n  };\n}\n\nexport function receiveLogout() {\n  return {\n    type: LOGOUT_SUCCESS,\n    isFetching: false,\n    isAuthenticated: false\n  };\n} // Logs the user out\n\nexport function logoutUser() {\n  let token_r = localStorage.getItem('id_token');\n  const config = {\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${token_r}`\n    },\n    body: {}\n  };\n  return dispatch => {\n    return fetch('http://localhost:8000/api/auth/logout', config).then(response => response.json()).then(({\n      response\n    }) => {\n      //debugger\n      dispatch(requestLogout());\n      localStorage.removeItem('id_token');\n      document.cookie = 'id_token=;expires=Thu, 01 Jan 1970 00:00:01 GMT;';\n\n      if (!response.ok) {// If there was a problem, we want to\n        // dispatch the error condition\n      }\n\n      dispatch(receiveLogout());\n    }).catch(err => console.error('Error: ', err));\n  };\n}\nexport function loginUser(creds) {\n  const config = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded'\n    },\n    //credentials: 'include',\n    body: `email=${creds.email}&password=${creds.password}`\n  };\n  return dispatch => {\n    // We dispatch requestLogin to kickoff the call to the API\n    dispatch(requestLogin(creds));\n\n    if (process.env.NODE_ENV === \"development\") {\n      return fetch('http://localhost:8000/api/auth/login', config).then(response => response.json().then(user => ({\n        user,\n        response\n      }))).then(({\n        user,\n        response\n      }) => {\n        //debugger\n        if (!response.ok) {\n          // If there was a problem, we want to\n          // dispatch the error condition\n          dispatch(loginError(user.message));\n          return Promise.reject(user);\n        } // in posts create new action and check http status, if malign logout\n        // If login was successful, set the token in local storage\n\n\n        localStorage.setItem('id_token', user.access_token); // Dispatch the success action\n\n        dispatch(receiveLogin(user));\n        return Promise.resolve(user);\n      }).catch(err => console.error('Error: ', err));\n    } else {\n      localStorage.setItem('id_token', appConfig.id_token);\n      dispatch(receiveLogin({\n        id_token: appConfig.id_token\n      }));\n    }\n  };\n}\nexport function registerUser(creds) {\n  const config = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded'\n    },\n    body: `name=${creds.name}&email=${creds.email}&password=${creds.password}&confirmPassword=${creds.confirmPassword}`\n  };\n  return dispatch => {\n    // We dispatch requestLogin to kickoff the call to the API\n    dispatch(requestLogin(creds)); //if(process.env.NODE_ENV === \"development\") {\n\n    return fetch('http://localhost:8000/api/auth/register', config).then(response => response.json().then(user => ({\n      user,\n      response\n    }))).then(({\n      user,\n      response\n    }) => {\n      //debugger\n      if (!response.ok) {\n        // If there was a problem, we want to\n        // dispatch the error condition\n        dispatch(registerError(user.message));\n        return Promise.reject(user);\n      } // in posts create new action and check http status, if malign logout\n      // If login was successful, set the token in local storage\n      // Dispatch the success action\n\n\n      dispatch(receiveRegister(user));\n      return Promise.resolve(user);\n    }).catch(err => console.error('Error: ', err)); // } else {\n    //   localStorage.setItem('id_token', appConfig.id_token);\n    //   dispatch(receiveLogin({id_token: appConfig.id_token}))\n    // }\n  };\n}","map":{"version":3,"sources":["/opt/lampp/htdocs/react-dashboard-master/src/actions/user.js"],"names":["appConfig","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILURE","LOGOUT_REQUEST","LOGOUT_SUCCESS","LOGOUT_FAILURE","requestLogin","creds","type","isFetching","isAuthenticated","receiveLogin","user","id_token","access_token","receiveRegister","REGISTER_SUCCESS","loginError","message","registerError","REGISTER_FAILURE","isFailed","requestLogout","receiveLogout","logoutUser","token_r","localStorage","getItem","config","method","headers","body","dispatch","fetch","then","response","json","removeItem","document","cookie","ok","catch","err","console","error","loginUser","email","password","process","env","NODE_ENV","Promise","reject","setItem","resolve","registerUser","name","confirmPassword"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,WAAtB;AAEA,OAAO,MAAMC,aAAa,GAAG,eAAtB;AACP,OAAO,MAAMC,aAAa,GAAG,eAAtB;AACP,OAAO,MAAMC,aAAa,GAAG,eAAtB;AACP,OAAO,MAAMC,cAAc,GAAG,gBAAvB;AACP,OAAO,MAAMC,cAAc,GAAG,gBAAvB;AACP,OAAO,MAAMC,cAAc,GAAG,gBAAvB;;AAEP,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAC3B,SAAO;AACLC,IAAAA,IAAI,EAAER,aADD;AAELS,IAAAA,UAAU,EAAE,IAFP;AAGLC,IAAAA,eAAe,EAAE,KAHZ;AAILH,IAAAA;AAJK,GAAP;AAMD;;AAED,OAAO,SAASI,YAAT,CAAsBC,IAAtB,EAA4B;AACjC,SAAO;AACLJ,IAAAA,IAAI,EAAEP,aADD;AAELQ,IAAAA,UAAU,EAAE,KAFP;AAGLC,IAAAA,eAAe,EAAE,IAHZ;AAILG,IAAAA,QAAQ,EAAED,IAAI,CAACE;AAJV,GAAP;AAMD;AAED,OAAO,SAASC,eAAT,CAAyBH,IAAzB,EAA+B;AACpC,SAAO;AACLJ,IAAAA,IAAI,EAAEQ,gBADD;AAELP,IAAAA,UAAU,EAAE,KAFP;AAGLC,IAAAA,eAAe,EAAE,IAHZ;AAILG,IAAAA,QAAQ,EAAED,IAAI,CAACE;AAJV,GAAP;AAMD;;AAED,SAASG,UAAT,CAAoBC,OAApB,EAA6B;AAC3B,SAAO;AACLV,IAAAA,IAAI,EAAEN,aADD;AAELO,IAAAA,UAAU,EAAE,KAFP;AAGLC,IAAAA,eAAe,EAAE,KAHZ;AAILQ,IAAAA;AAJK,GAAP;AAMD;;AAED,SAASC,aAAT,CAAuBD,OAAvB,EAAgC;AAC9B,SAAO;AACLV,IAAAA,IAAI,EAAEY,gBADD;AAELC,IAAAA,QAAQ,EAAE,KAFL;AAGLH,IAAAA;AAHK,GAAP;AAKD;;AAED,SAASI,aAAT,GAAyB;AACvB,SAAO;AACLd,IAAAA,IAAI,EAAEL,cADD;AAELM,IAAAA,UAAU,EAAE,IAFP;AAGLC,IAAAA,eAAe,EAAE;AAHZ,GAAP;AAKD;;AAED,OAAO,SAASa,aAAT,GAAyB;AAC9B,SAAO;AACLf,IAAAA,IAAI,EAAEJ,cADD;AAELK,IAAAA,UAAU,EAAE,KAFP;AAGLC,IAAAA,eAAe,EAAE;AAHZ,GAAP;AAKD,C,CAED;;AACA,OAAO,SAASc,UAAT,GAAsB;AAC3B,MAAIC,OAAO,GAAGC,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAd;AACA,QAAMC,MAAM,GAAG;AACbC,IAAAA,MAAM,EAAE,MADK;AAEbC,IAAAA,OAAO,EAAE;AAAE,uBAAkB,UAASL,OAAQ;AAArC,KAFI;AAGbM,IAAAA,IAAI,EAAE;AAHO,GAAf;AAKA,SAAOC,QAAQ,IAAI;AACjB,WAAOC,KAAK,CAAC,uCAAD,EAA0CL,MAA1C,CAAL,CACJM,IADI,CACCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADb,EAEJF,IAFI,CAEC,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAkB;AACtB;AACAH,MAAAA,QAAQ,CAACV,aAAa,EAAd,CAAR;AACAI,MAAAA,YAAY,CAACW,UAAb,CAAwB,UAAxB;AACAC,MAAAA,QAAQ,CAACC,MAAT,GAAkB,kDAAlB;;AACA,UAAI,CAACJ,QAAQ,CAACK,EAAd,EAAkB,CAChB;AACA;AACD;;AACDR,MAAAA,QAAQ,CAACT,aAAa,EAAd,CAAR;AACD,KAZI,EAaJkB,KAbI,CAaEC,GAAG,IAAIC,OAAO,CAACC,KAAR,CAAc,SAAd,EAAyBF,GAAzB,CAbT,CAAP;AAcD,GAfD;AAgBD;AAED,OAAO,SAASG,SAAT,CAAmBtC,KAAnB,EAA0B;AAC/B,QAAMqB,MAAM,GAAG;AACbC,IAAAA,MAAM,EAAE,MADK;AAEbC,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB,KAFI;AAGb;AACAC,IAAAA,IAAI,EAAG,SAAQxB,KAAK,CAACuC,KAAM,aAAYvC,KAAK,CAACwC,QAAS;AAJzC,GAAf;AAOA,SAAOf,QAAQ,IAAI;AACjB;AACAA,IAAAA,QAAQ,CAAC1B,YAAY,CAACC,KAAD,CAAb,CAAR;;AACA,QAAGyC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAA5B,EAA2C;AAC3C,aAAOjB,KAAK,CAAC,sCAAD,EAAyCL,MAAzC,CAAL,CACJM,IADI,CACCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,GAAgBF,IAAhB,CAAqBtB,IAAI,KAAK;AAAEA,QAAAA,IAAF;AAAQuB,QAAAA;AAAR,OAAL,CAAzB,CADb,EAEJD,IAFI,CAEC,CAAC;AAAEtB,QAAAA,IAAF;AAAQuB,QAAAA;AAAR,OAAD,KAAwB;AAC5B;AACA,YAAI,CAACA,QAAQ,CAACK,EAAd,EAAkB;AAChB;AACA;AACAR,UAAAA,QAAQ,CAACf,UAAU,CAACL,IAAI,CAACM,OAAN,CAAX,CAAR;AACA,iBAAOiC,OAAO,CAACC,MAAR,CAAexC,IAAf,CAAP;AACD,SAP2B,CAQ5B;AACA;;;AACAc,QAAAA,YAAY,CAAC2B,OAAb,CAAqB,UAArB,EAAiCzC,IAAI,CAACE,YAAtC,EAV4B,CAW5B;;AACAkB,QAAAA,QAAQ,CAACrB,YAAY,CAACC,IAAD,CAAb,CAAR;AACA,eAAOuC,OAAO,CAACG,OAAR,CAAgB1C,IAAhB,CAAP;AACD,OAhBI,EAiBJ6B,KAjBI,CAiBEC,GAAG,IAAIC,OAAO,CAACC,KAAR,CAAc,SAAd,EAAyBF,GAAzB,CAjBT,CAAP;AAkBC,KAnBD,MAmBO;AACLhB,MAAAA,YAAY,CAAC2B,OAAb,CAAqB,UAArB,EAAiCtD,SAAS,CAACc,QAA3C;AACAmB,MAAAA,QAAQ,CAACrB,YAAY,CAAC;AAACE,QAAAA,QAAQ,EAAEd,SAAS,CAACc;AAArB,OAAD,CAAb,CAAR;AACD;AACF,GA1BD;AA2BD;AAED,OAAO,SAAS0C,YAAT,CAAsBhD,KAAtB,EAA6B;AAClC,QAAMqB,MAAM,GAAG;AACbC,IAAAA,MAAM,EAAE,MADK;AAEbC,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB,KAFI;AAGbC,IAAAA,IAAI,EAAG,QAAOxB,KAAK,CAACiD,IAAK,UAASjD,KAAK,CAACuC,KAAM,aAAYvC,KAAK,CAACwC,QAAS,oBAAmBxC,KAAK,CAACkD,eAAgB;AAHrG,GAAf;AAMA,SAAOzB,QAAQ,IAAI;AACjB;AACAA,IAAAA,QAAQ,CAAC1B,YAAY,CAACC,KAAD,CAAb,CAAR,CAFiB,CAGjB;;AACA,WAAO0B,KAAK,CAAC,yCAAD,EAA4CL,MAA5C,CAAL,CACJM,IADI,CACCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,GAAgBF,IAAhB,CAAqBtB,IAAI,KAAK;AAAEA,MAAAA,IAAF;AAAQuB,MAAAA;AAAR,KAAL,CAAzB,CADb,EAEJD,IAFI,CAEC,CAAC;AAAEtB,MAAAA,IAAF;AAAQuB,MAAAA;AAAR,KAAD,KAAwB;AAC5B;AACA,UAAI,CAACA,QAAQ,CAACK,EAAd,EAAkB;AAChB;AACA;AACAR,QAAAA,QAAQ,CAACb,aAAa,CAACP,IAAI,CAACM,OAAN,CAAd,CAAR;AACA,eAAOiC,OAAO,CAACC,MAAR,CAAexC,IAAf,CAAP;AACD,OAP2B,CAQ5B;AACA;AAEA;;;AACAoB,MAAAA,QAAQ,CAACjB,eAAe,CAACH,IAAD,CAAhB,CAAR;AACA,aAAOuC,OAAO,CAACG,OAAR,CAAgB1C,IAAhB,CAAP;AACD,KAhBI,EAiBJ6B,KAjBI,CAiBEC,GAAG,IAAIC,OAAO,CAACC,KAAR,CAAc,SAAd,EAAyBF,GAAzB,CAjBT,CAAP,CAJiB,CAsBjB;AACA;AACA;AACA;AACD,GA1BD;AA2BD","sourcesContent":["import appConfig from '../config';\n\nexport const LOGIN_REQUEST = 'LOGIN_REQUEST';\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nexport const LOGIN_FAILURE = 'LOGIN_FAILURE';\nexport const LOGOUT_REQUEST = 'LOGOUT_REQUEST';\nexport const LOGOUT_SUCCESS = 'LOGOUT_SUCCESS';\nexport const LOGOUT_FAILURE = 'LOGOUT_FAILURE';\n\nfunction requestLogin(creds) {\n  return {\n    type: LOGIN_REQUEST,\n    isFetching: true,\n    isAuthenticated: false,\n    creds,\n  };\n}\n\nexport function receiveLogin(user) {\n  return {\n    type: LOGIN_SUCCESS,\n    isFetching: false,\n    isAuthenticated: true,\n    id_token: user.access_token,\n  };\n}\n\nexport function receiveRegister(user) {\n  return {\n    type: REGISTER_SUCCESS,\n    isFetching: false,\n    isAuthenticated: true,\n    id_token: user.access_token,\n  };\n}\n\nfunction loginError(message) {\n  return {\n    type: LOGIN_FAILURE,\n    isFetching: false,\n    isAuthenticated: false,\n    message,\n  };\n}\n\nfunction registerError(message) {\n  return {\n    type: REGISTER_FAILURE,\n    isFailed: false,\n    message,\n  };\n}\n\nfunction requestLogout() {\n  return {\n    type: LOGOUT_REQUEST,\n    isFetching: true,\n    isAuthenticated: true,\n  };\n}\n\nexport function receiveLogout() {\n  return {\n    type: LOGOUT_SUCCESS,\n    isFetching: false,\n    isAuthenticated: false,\n  };\n}\n\n// Logs the user out\nexport function logoutUser() {\n  let token_r = localStorage.getItem('id_token');\n  const config = {\n    method: 'POST',\n    headers: { 'Authorization': `Bearer ${token_r}` },\n    body: {},\n  };\n  return dispatch => {\n    return fetch('http://localhost:8000/api/auth/logout', config)\n      .then(response => response.json())\n      .then(({ response }) => {\n        //debugger\n        dispatch(requestLogout());\n        localStorage.removeItem('id_token');\n        document.cookie = 'id_token=;expires=Thu, 01 Jan 1970 00:00:01 GMT;';\n        if (!response.ok) {\n          // If there was a problem, we want to\n          // dispatch the error condition\n        }\n        dispatch(receiveLogout());\n      })\n      .catch(err => console.error('Error: ', err));\n  };\n}\n\nexport function loginUser(creds) {\n  const config = {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n    //credentials: 'include',\n    body: `email=${creds.email}&password=${creds.password}`,\n  };\n  \n  return dispatch => {\n    // We dispatch requestLogin to kickoff the call to the API\n    dispatch(requestLogin(creds));\n    if(process.env.NODE_ENV === \"development\") {\n    return fetch('http://localhost:8000/api/auth/login', config)\n      .then(response => response.json().then(user => ({ user, response })))\n      .then(({ user, response }) => {\n        //debugger\n        if (!response.ok) {\n          // If there was a problem, we want to\n          // dispatch the error condition\n          dispatch(loginError(user.message));\n          return Promise.reject(user);\n        }\n        // in posts create new action and check http status, if malign logout\n        // If login was successful, set the token in local storage\n        localStorage.setItem('id_token', user.access_token);\n        // Dispatch the success action\n        dispatch(receiveLogin(user));\n        return Promise.resolve(user);\n      })\n      .catch(err => console.error('Error: ', err));\n    } else {\n      localStorage.setItem('id_token', appConfig.id_token);\n      dispatch(receiveLogin({id_token: appConfig.id_token}))\n    }\n  };\n}\n\nexport function registerUser(creds) {\n  const config = {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n    body: `name=${creds.name}&email=${creds.email}&password=${creds.password}&confirmPassword=${creds.confirmPassword}`,\n  };\n  \n  return dispatch => {\n    // We dispatch requestLogin to kickoff the call to the API\n    dispatch(requestLogin(creds));\n    //if(process.env.NODE_ENV === \"development\") {\n    return fetch('http://localhost:8000/api/auth/register', config)\n      .then(response => response.json().then(user => ({ user, response })))\n      .then(({ user, response }) => {\n        //debugger\n        if (!response.ok) {\n          // If there was a problem, we want to\n          // dispatch the error condition\n          dispatch(registerError(user.message));\n          return Promise.reject(user);\n        }\n        // in posts create new action and check http status, if malign logout\n        // If login was successful, set the token in local storage\n       \n        // Dispatch the success action\n        dispatch(receiveRegister(user));\n        return Promise.resolve(user);\n      })\n      .catch(err => console.error('Error: ', err));\n    // } else {\n    //   localStorage.setItem('id_token', appConfig.id_token);\n    //   dispatch(receiveLogin({id_token: appConfig.id_token}))\n    // }\n  };\n}"]},"metadata":{},"sourceType":"module"}