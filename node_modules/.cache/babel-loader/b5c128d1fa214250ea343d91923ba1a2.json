{"ast":null,"code":"export const CREATE_POST_INITIAL = 'CREATE_POST_INITIAL';\nexport const CREATE_POST_REQUEST = 'CREATE_POST_REQUEST';\nexport const CREATE_POST_SUCCESS = 'CREATE_POST_SUCCESS';\nexport const CREATE_POST_FAILURE = 'CREATE_POST_FAILURE';\nexport const FETCH_POSTS_REQUEST = 'FETCH_POSTS_REQUEST';\nexport const FETCH_POSTS_SUCCESS = 'FETCH_POSTS_SUCCESS';\nexport const FETCH_POSTS_FAILURE = 'FETCH_POSTS_FAILURE';\n\nfunction createPostInitial() {\n  return {\n    type: CREATE_POST_INITIAL,\n    isFetching: false\n  };\n}\n\nfunction requestCreatePost(post) {\n  return {\n    type: CREATE_POST_REQUEST,\n    isFetching: true,\n    post\n  };\n}\n\nfunction createPostSuccess(post) {\n  return {\n    type: CREATE_POST_SUCCESS,\n    isFetching: false,\n    post\n  };\n}\n\nfunction createPostError(message) {\n  return {\n    type: CREATE_POST_FAILURE,\n    isFetching: false,\n    message\n  };\n}\n\nfunction requestFetchPosts() {\n  return {\n    type: FETCH_POSTS_REQUEST,\n    isFetching: true\n  };\n}\n\nfunction fetchPostsSuccess(posts) {\n  return {\n    type: FETCH_POSTS_SUCCESS,\n    isFetching: false,\n    posts\n  };\n}\n\nfunction fetchPostsError(message) {\n  return {\n    type: FETCH_POSTS_FAILURE,\n    isFetching: false,\n    message\n  };\n}\n\nexport function createPost(postData) {\n  const config = {\n    method: 'post',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      query: `mutation {\n                addPost(title: \"${postData.title}\", content: \"${postData.content}\"){\n                  id,\n                  title,\n                  content\n                }\n              }`\n    }),\n    credentials: 'include'\n  };\n  return dispatch => {\n    // We dispatch requestCreatePost to kickoff the call to the API\n    dispatch(requestCreatePost(postData));\n\n    if (process.env.NODE_ENV === \"development\") {\n      return fetch('/graphql', config).then(response => response.json().then(post => ({\n        post,\n        response\n      }))).then(({\n        post,\n        response\n      }) => {\n        if (!response.ok) {\n          // If there was a problem, we want to\n          // dispatch the error condition\n          dispatch(createPostError(post.message));\n          return Promise.reject(post);\n        } // Dispatch the success action\n\n\n        dispatch(createPostSuccess(post));\n        setTimeout(() => {\n          dispatch(createPostInitial());\n        }, 5000);\n        return Promise.resolve(post);\n      }).catch(err => console.error('Error: ', err));\n    } else {\n      dispatch(createPostError(''));\n      return Promise.reject();\n    }\n  };\n}\nexport function fetchPosts() {\n  const config = {\n    method: 'post',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      query: '{posts{id,title,content,updatedAt}}'\n    }),\n    credentials: 'include'\n  };\n  return dispatch => {\n    dispatch(requestFetchPosts());\n    return fetch('/graphql', config).then(response => response.json().then(responseJson => ({\n      posts: responseJson.data.posts,\n      responseJson\n    }))).then(({\n      posts,\n      responseJson\n    }) => {\n      if (!responseJson.data.posts) {\n        // If there was a problem, we want to\n        // dispatch the error condition\n        dispatch(fetchPostsError(posts.message));\n        return Promise.reject(posts);\n      } // Dispatch the success action\n\n\n      dispatch(fetchPostsSuccess(posts));\n      return Promise.resolve(posts);\n    }).catch(err => console.error('Error: ', err));\n  };\n}","map":{"version":3,"sources":["/opt/lampp/htdocs/react-dashboard-master/src/actions/posts.js"],"names":["CREATE_POST_INITIAL","CREATE_POST_REQUEST","CREATE_POST_SUCCESS","CREATE_POST_FAILURE","FETCH_POSTS_REQUEST","FETCH_POSTS_SUCCESS","FETCH_POSTS_FAILURE","createPostInitial","type","isFetching","requestCreatePost","post","createPostSuccess","createPostError","message","requestFetchPosts","fetchPostsSuccess","posts","fetchPostsError","createPost","postData","config","method","headers","Accept","body","JSON","stringify","query","title","content","credentials","dispatch","process","env","NODE_ENV","fetch","then","response","json","ok","Promise","reject","setTimeout","resolve","catch","err","console","error","fetchPosts","responseJson","data"],"mappings":"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","sourcesContent":["export const CREATE_POST_INITIAL = 'CREATE_POST_INITIAL';\nexport const CREATE_POST_REQUEST = 'CREATE_POST_REQUEST';\nexport const CREATE_POST_SUCCESS = 'CREATE_POST_SUCCESS';\nexport const CREATE_POST_FAILURE = 'CREATE_POST_FAILURE';\nexport const FETCH_POSTS_REQUEST = 'FETCH_POSTS_REQUEST';\nexport const FETCH_POSTS_SUCCESS = 'FETCH_POSTS_SUCCESS';\nexport const FETCH_POSTS_FAILURE = 'FETCH_POSTS_FAILURE';\n\nfunction createPostInitial() {\n  return {\n    type: CREATE_POST_INITIAL,\n    isFetching: false,\n  };\n}\n\nfunction requestCreatePost(post) {\n  return {\n    type: CREATE_POST_REQUEST,\n    isFetching: true,\n    post,\n  };\n}\n\nfunction createPostSuccess(post) {\n  return {\n    type: CREATE_POST_SUCCESS,\n    isFetching: false,\n    post,\n  };\n}\n\nfunction createPostError(message) {\n  return {\n    type: CREATE_POST_FAILURE,\n    isFetching: false,\n    message,\n  };\n}\n\nfunction requestFetchPosts() {\n  return {\n    type: FETCH_POSTS_REQUEST,\n    isFetching: true,\n  };\n}\n\nfunction fetchPostsSuccess(posts) {\n  return {\n    type: FETCH_POSTS_SUCCESS,\n    isFetching: false,\n    posts,\n  };\n}\n\nfunction fetchPostsError(message) {\n  return {\n    type: FETCH_POSTS_FAILURE,\n    isFetching: false,\n    message,\n  };\n}\n\nexport function createPost(postData) {\n  const config = {\n    method: 'post',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      query: `mutation {\n                addPost(title: \"${postData.title}\", content: \"${\n        postData.content\n      }\"){\n                  id,\n                  title,\n                  content\n                }\n              }`,\n    }),\n    credentials: 'include',\n  };\n\n  return dispatch => {\n    // We dispatch requestCreatePost to kickoff the call to the API\n    dispatch(requestCreatePost(postData));\n    if(process.env.NODE_ENV === \"development\") {\n    return fetch('/graphql', config)\n      .then(response => response.json().then(post => ({ post, response })))\n      .then(({ post, response }) => {\n        if (!response.ok) {\n          // If there was a problem, we want to\n          // dispatch the error condition\n          dispatch(createPostError(post.message));\n          return Promise.reject(post);\n        }\n        // Dispatch the success action\n        dispatch(createPostSuccess(post));\n        setTimeout(() => {\n          dispatch(createPostInitial());\n        }, 5000);\n        return Promise.resolve(post);\n      })\n      .catch(err => console.error('Error: ', err));\n    } else {\n      dispatch(createPostError(''));\n      return Promise.reject();\n    }\n  };\n}\n\nexport function fetchPosts() {\n  const config = {\n    method: 'post',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      query: '{posts{id,title,content,updatedAt}}',\n    }),\n    credentials: 'include',\n  };\n\n  return dispatch => {\n    dispatch(requestFetchPosts());\n\n    return fetch('/graphql', config)\n      .then(response =>\n        response.json().then(responseJson => ({\n          posts: responseJson.data.posts,\n          responseJson,\n        })),\n      )\n      .then(({ posts, responseJson }) => {\n        if (!responseJson.data.posts) {\n          // If there was a problem, we want to\n          // dispatch the error condition\n          dispatch(fetchPostsError(posts.message));\n          return Promise.reject(posts);\n        }\n        // Dispatch the success action\n        dispatch(fetchPostsSuccess(posts));\n        return Promise.resolve(posts);\n      })\n      .catch(err => console.error('Error: ', err));\n  };\n}\n"]},"metadata":{},"sourceType":"module"}