{"ast":null,"code":"import { Type } from './type';\nimport { URL_ADD_PRODUCT } from '../constants/index';\nimport { NotificationManager } from 'react-notifications';\nimport axios from 'axios'; // Get products actions.\n\nexport const getProducts = (userData, history) => async dispatch => {\n  try {\n    dispatch({\n      type: Type.product.POST_PRODUCTS_REQUEST,\n      payload: true\n    });\n    const response = await axios.get(URL_PRODUCTS, userData, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n\n    if (response.data.success === true) {\n      dispatch({\n        type: Type.product.GET_PRODUCTS_SUCCESS,\n        payload: response.data.data\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: Type.product.GET_PRODUCTS_FAILURE,\n      payload: error\n    });\n  }\n}; // Add product.\n\nexport const addProduct = data => async dispatch => {\n  try {\n    dispatch({\n      type: Type.product.POST_ADD_PRODUCT_REQUEST,\n      payload: true\n    });\n    const response = await axios.post(URL_ADD_PRODUCT, data, {\n      headers: {\n        'Content-Type': 'application/json' //'access-token': reactLocalStorage.get('access-token')\n\n      }\n    });\n\n    if (response.data.success === true) {\n      dispatch({\n        type: Type.product.GET_ADD_PRODUCT_SUCCESS,\n        payload: response.data.data\n      });\n      NotificationManager.success(response.data.message, 'Product Added.');\n    } else {\n      NotificationManager.error(response.data.message, 'Something was wrong.');\n    }\n  } catch (error) {\n    dispatch({\n      type: Type.product.GET_ADD_PRODUCT_FAILURE,\n      payload: error\n    });\n  }\n};","map":{"version":3,"sources":["/opt/lampp/htdocs/react-dashboard-master/src/actions/products.js"],"names":["Type","URL_ADD_PRODUCT","NotificationManager","axios","getProducts","userData","history","dispatch","type","product","POST_PRODUCTS_REQUEST","payload","response","get","URL_PRODUCTS","headers","data","success","GET_PRODUCTS_SUCCESS","error","GET_PRODUCTS_FAILURE","addProduct","POST_ADD_PRODUCT_REQUEST","post","GET_ADD_PRODUCT_SUCCESS","message","GET_ADD_PRODUCT_FAILURE"],"mappings":"AAAA,SAAQA,IAAR,QAAmB,QAAnB;AACA,SAASC,eAAT,QAAgC,oBAAhC;AACA,SAASC,mBAAT,QAAoC,qBAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAIA;;AACA,OAAO,MAAMC,WAAW,GAAG,CAACC,QAAD,EAAWC,OAAX,KAAuB,MAAMC,QAAN,IAAkB;AAChE,MAAI;AACAA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAER,IAAI,CAACS,OAAL,CAAaC,qBAArB;AAA4CC,MAAAA,OAAO,EAAE;AAArD,KAAD,CAAR;AACA,UAAMC,QAAQ,GAAG,MAAMT,KAAK,CAACU,GAAN,CAAUC,YAAV,EAAwBT,QAAxB,EAAkC;AACrDU,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB;AAD4C,KAAlC,CAAvB;;AAGA,QAAIH,QAAQ,CAACI,IAAT,CAAcC,OAAd,KAA0B,IAA9B,EAAoC;AAChCV,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAER,IAAI,CAACS,OAAL,CAAaS,oBAArB;AAA2CP,QAAAA,OAAO,EAAEC,QAAQ,CAACI,IAAT,CAAcA;AAAlE,OAAD,CAAR;AACH;AACJ,GARD,CAQE,OAAOG,KAAP,EAAc;AACZZ,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAER,IAAI,CAACS,OAAL,CAAaW,oBAArB;AAA2CT,MAAAA,OAAO,EAAEQ;AAApD,KAAD,CAAR;AACH;AACJ,CAZM,C,CAcP;;AACA,OAAO,MAAME,UAAU,GAAIL,IAAD,IAAU,MAAMT,QAAN,IAAkB;AAClD,MAAI;AACAA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAER,IAAI,CAACS,OAAL,CAAaa,wBAArB;AAA+CX,MAAAA,OAAO,EAAE;AAAxD,KAAD,CAAR;AACA,UAAMC,QAAQ,GAAG,MAAMT,KAAK,CAACoB,IAAN,CAAWtB,eAAX,EAA4Be,IAA5B,EAAkC;AACrDD,MAAAA,OAAO,EAAE;AACL,wBAAgB,kBADX,CAEL;;AAFK;AAD4C,KAAlC,CAAvB;;AAMA,QAAIH,QAAQ,CAACI,IAAT,CAAcC,OAAd,KAA0B,IAA9B,EAAoC;AAChCV,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAER,IAAI,CAACS,OAAL,CAAae,uBAArB;AAA8Cb,QAAAA,OAAO,EAAEC,QAAQ,CAACI,IAAT,CAAcA;AAArE,OAAD,CAAR;AACAd,MAAAA,mBAAmB,CAACe,OAApB,CAA4BL,QAAQ,CAACI,IAAT,CAAcS,OAA1C,EAAmD,gBAAnD;AACH,KAHD,MAGO;AACHvB,MAAAA,mBAAmB,CAACiB,KAApB,CAA0BP,QAAQ,CAACI,IAAT,CAAcS,OAAxC,EAAiD,sBAAjD;AACH;AACJ,GAdD,CAcE,OAAON,KAAP,EAAc;AACZZ,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAER,IAAI,CAACS,OAAL,CAAaiB,uBAArB;AAA8Cf,MAAAA,OAAO,EAAEQ;AAAvD,KAAD,CAAR;AACH;AACJ,CAlBM","sourcesContent":["import {Type} from './type';\nimport { URL_ADD_PRODUCT } from '../constants/index';\nimport { NotificationManager } from 'react-notifications';\nimport axios from 'axios';\n\n\n\n// Get products actions.\nexport const getProducts = (userData, history) => async dispatch => {\n    try {\n        dispatch({ type: Type.product.POST_PRODUCTS_REQUEST, payload: true });\n        const response = await axios.get(URL_PRODUCTS, userData, {\n            headers: { 'Content-Type': 'application/json' }\n        });\n        if (response.data.success === true) {\n            dispatch({ type: Type.product.GET_PRODUCTS_SUCCESS, payload: response.data.data });\n        }\n    } catch (error) {\n        dispatch({ type: Type.product.GET_PRODUCTS_FAILURE, payload: error });\n    }\n};\n\n// Add product.\nexport const addProduct = (data) => async dispatch => {\n    try {\n        dispatch({ type: Type.product.POST_ADD_PRODUCT_REQUEST, payload: true });\n        const response = await axios.post(URL_ADD_PRODUCT, data, {\n            headers: { \n                'Content-Type': 'application/json',\n                //'access-token': reactLocalStorage.get('access-token')\n            }\n        });\n        if (response.data.success === true) {\n            dispatch({ type: Type.product.GET_ADD_PRODUCT_SUCCESS, payload: response.data.data });\n            NotificationManager.success(response.data.message, 'Product Added.');\n        } else {\n            NotificationManager.error(response.data.message, 'Something was wrong.');\n        }\n    } catch (error) {\n        dispatch({ type: Type.product.GET_ADD_PRODUCT_FAILURE, payload: error });\n    }\n}"]},"metadata":{},"sourceType":"module"}