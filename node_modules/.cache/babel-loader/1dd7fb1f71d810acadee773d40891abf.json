{"ast":null,"code":"import _defineProperty from \"/opt/lampp/htdocs/react-dashboard-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/opt/lampp/htdocs/react-dashboard-master/src/pages/posts/list/PostList.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { Table, Breadcrumb, BreadcrumbItem } from 'reactstrap';\nimport { mock } from './mock';\nimport s from './PostList.module.scss';\nimport Widget from '../../../components/Widget';\nimport { fetchPosts } from '../../../actions/posts';\n\nclass PostList extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"formatDate\", str => {\n      return str.replace(/,.*$/, \"\");\n    });\n  }\n\n  componentDidMount() {\n    if (process.env.NODE_ENV === \"development\") {\n      this.props.dispatch(fetchPosts());\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: s.root,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Breadcrumb, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(BreadcrumbItem, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }\n    }, \"YOU ARE HERE\"), /*#__PURE__*/React.createElement(BreadcrumbItem, {\n      active: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }\n    }, \"Posts\")), /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }\n    }, \"Posts\"), /*#__PURE__*/React.createElement(Widget, {\n      className: \"pb-0\",\n      title: /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"pull-right mt-n-xs\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Link, {\n        to: \"/app/posts/new\",\n        className: \"btn btn-sm btn-inverse\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 17\n        }\n      }, \"Create new\")), /*#__PURE__*/React.createElement(\"h5\", {\n        className: \"mt-0\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 15\n        }\n      }, \"Posts \", /*#__PURE__*/React.createElement(\"span\", {\n        className: \"fw-semi-bold\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 23\n        }\n      }, \"List\"))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"widget-table-overflow\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Table, {\n      striped: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"thead\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }\n    }, \"Title\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }\n    }, \"Content\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }\n    }, \"Last Updated\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 15\n      }\n    }, this.props.posts && this.props.posts.map(post => /*#__PURE__*/React.createElement(\"tr\", {\n      key: post.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 19\n      }\n    }, post.title), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 19\n      }\n    }, post.content.slice(0, 80), \"...\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 19\n      }\n    }, this.formatDate(new Date(post.updatedAt).toLocaleString())))), this.props.posts && !this.props.posts.length && mock.map(post => /*#__PURE__*/React.createElement(\"tr\", {\n      key: post.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 21\n      }\n    }, post.title), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 21\n      }\n    }, post.content.slice(0, 80), \"...\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 21\n      }\n    }, post.updatedAt))), this.props.isFetching && /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      colSpan: \"100\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 19\n      }\n    }, \"Loading...\")))))));\n  }\n\n}\n\n_defineProperty(PostList, \"propTypes\", {\n  dispatch: PropTypes.func.isRequired,\n  posts: PropTypes.array,\n  // eslint-disable-line\n  isFetching: PropTypes.bool\n});\n\n_defineProperty(PostList, \"defaultProps\", {\n  isFetching: false,\n  posts: []\n});\n\n_defineProperty(PostList, \"meta\", {\n  title: 'Posts list',\n  description: 'About description'\n});\n\nfunction mapStateToProps(state) {\n  return {\n    isFetching: state.posts.isFetching,\n    posts: state.posts.posts\n  };\n}\n\nexport default connect(mapStateToProps)(PostList);","map":{"version":3,"sources":["/opt/lampp/htdocs/react-dashboard-master/src/pages/posts/list/PostList.js"],"names":["React","PropTypes","Link","connect","Table","Breadcrumb","BreadcrumbItem","mock","s","Widget","fetchPosts","PostList","Component","str","replace","componentDidMount","process","env","NODE_ENV","props","dispatch","render","root","posts","map","post","id","title","content","slice","formatDate","Date","updatedAt","toLocaleString","length","isFetching","func","isRequired","array","bool","description","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport {\n  Table,\n  Breadcrumb,\n  BreadcrumbItem,\n} from 'reactstrap';\nimport { mock } from './mock'\n\nimport s from './PostList.module.scss';\nimport Widget from '../../../components/Widget';\nimport { fetchPosts } from '../../../actions/posts';\n\nclass PostList extends React.Component {\n  static propTypes = {\n    dispatch: PropTypes.func.isRequired,\n    posts: PropTypes.array, // eslint-disable-line\n    isFetching: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    isFetching: false,\n    posts: [],\n  };\n\n  static meta = {\n    title: 'Posts list',\n    description: 'About description',\n  };\n\n  componentDidMount() {\n    if(process.env.NODE_ENV === \"development\") {\n      this.props.dispatch(fetchPosts());      \n    }\n  }\n\n  formatDate = (str) => {\n    return str.replace(/,.*$/,\"\")\n  }\n\n  render() {\n    return (\n      <div className={s.root}>\n        <Breadcrumb>\n          <BreadcrumbItem>YOU ARE HERE</BreadcrumbItem>\n          <BreadcrumbItem active>Posts</BreadcrumbItem>\n        </Breadcrumb>\n        <h1>Posts</h1>\n        <Widget\n          className=\"pb-0\"\n          title={\n            <div>\n              <div className=\"pull-right mt-n-xs\">\n                <Link to=\"/app/posts/new\" className=\"btn btn-sm btn-inverse\">\n                  Create new\n                </Link>\n              </div>\n              <h5 className=\"mt-0\">\n                Posts <span className=\"fw-semi-bold\">List</span>\n              </h5>\n            </div>\n          }\n        >\n          <div className=\"widget-table-overflow\">\n            <Table striped>\n              <thead>\n              <tr>\n                <th>Title</th>\n                <th>Content</th>\n                <th>Last Updated</th>\n              </tr>\n              </thead>\n              <tbody>\n              {this.props.posts &&\n              this.props.posts.map(post => (\n                <tr key={post.id}>\n                  <td>{post.title}</td>\n                  <td>{post.content.slice(0, 80)}...</td>\n                  <td>{this.formatDate(new Date(post.updatedAt).toLocaleString())}</td>\n                </tr>\n              ))}\n              {this.props.posts &&\n              !this.props.posts.length && (\n                mock.map(post => (\n                  <tr key={post.id}>\n                    <td>{post.title}</td>\n                    <td>{post.content.slice(0, 80)}...</td>\n                    <td>{post.updatedAt}</td>\n                  </tr>\n                ))\n              )}\n              {this.props.isFetching && (\n                <tr>\n                  <td colSpan=\"100\">Loading...</td>\n                </tr>\n              )}\n              </tbody>\n            </Table>\n          </div>\n        </Widget>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    isFetching: state.posts.isFetching,\n    posts: state.posts.posts,\n  };\n}\n\nexport default connect(mapStateToProps)(PostList);\n"]},"metadata":{},"sourceType":"module"}