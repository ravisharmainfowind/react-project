{"ast":null,"code":"export const POST_PRODUCTS_REQUEST = 'POST_PRODUCTS_REQUEST';\nexport const GET_PRODUCTS_SUCCESS = 'GET_PRODUCTS_SUCCESS';\nexport const GET_PRODUCTS_FAILURE = 'GET_PRODUCTS_FAILURE';\nimport { Type } from './type';\nimport { URL_ADD_PRODUCT, URL_PRODUCTS } from '../constants/index';\nimport { NotificationManager } from 'react-notifications';\nimport axios from 'axios'; // Get products actions.\n\nexport const getProducts = (userData, history) => async dispatch => {\n  try {\n    dispatch({\n      type: Type.product.POST_PRODUCTS_REQUEST,\n      payload: true\n    });\n    const response = await axios.get(URL_PRODUCTS, userData, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n\n    if (response.data.success === true) {\n      dispatch({\n        type: Type.product.GET_PRODUCTS_SUCCESS,\n        payload: response.data.data\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: Type.product.GET_PRODUCTS_FAILURE,\n      payload: error\n    });\n  }\n}; // Add product.\n\nexport const addProduct = data => async dispatch => {\n  try {\n    dispatch({\n      type: Type.product.POST_ADD_PRODUCT_REQUEST,\n      payload: true\n    });\n    const response = await axios.post(URL_ADD_PRODUCT, data, {\n      headers: {\n        'Content-Type': 'application/json' //'access-token': reactLocalStorage.get('access-token')\n\n      }\n    });\n\n    if (response.data.success === true) {\n      dispatch({\n        type: Type.product.GET_ADD_PRODUCT_SUCCESS,\n        payload: response.data.data\n      });\n      NotificationManager.success(response.data.message, 'Product Added.');\n    } else {\n      NotificationManager.error(response.data.message, 'Something was wrong.');\n    }\n  } catch (error) {\n    dispatch({\n      type: Type.product.GET_ADD_PRODUCT_FAILURE,\n      payload: error\n    });\n  }\n};","map":{"version":3,"sources":["/opt/lampp/htdocs/react-dashboard-master/src/actions/products.js"],"names":["POST_PRODUCTS_REQUEST","GET_PRODUCTS_SUCCESS","GET_PRODUCTS_FAILURE","Type","URL_ADD_PRODUCT","URL_PRODUCTS","NotificationManager","axios","getProducts","userData","history","dispatch","type","product","payload","response","get","headers","data","success","error","addProduct","POST_ADD_PRODUCT_REQUEST","post","GET_ADD_PRODUCT_SUCCESS","message","GET_ADD_PRODUCT_FAILURE"],"mappings":"AAAA,OAAO,MAAMA,qBAAqB,GAAK,uBAAhC;AACP,OAAO,MAAMC,oBAAoB,GAAM,sBAAhC;AACP,OAAO,MAAMC,oBAAoB,GAAM,sBAAhC;AAEP,SAAQC,IAAR,QAAmB,QAAnB;AACA,SAASC,eAAT,EAAyBC,YAAzB,QAA6C,oBAA7C;AACA,SAASC,mBAAT,QAAoC,qBAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAIA;;AACA,OAAO,MAAMC,WAAW,GAAG,CAACC,QAAD,EAAWC,OAAX,KAAuB,MAAMC,QAAN,IAAkB;AAChE,MAAI;AACAA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAET,IAAI,CAACU,OAAL,CAAab,qBAArB;AAA4Cc,MAAAA,OAAO,EAAE;AAArD,KAAD,CAAR;AACA,UAAMC,QAAQ,GAAG,MAAMR,KAAK,CAACS,GAAN,CAAUX,YAAV,EAAwBI,QAAxB,EAAkC;AACrDQ,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB;AAD4C,KAAlC,CAAvB;;AAGA,QAAIF,QAAQ,CAACG,IAAT,CAAcC,OAAd,KAA0B,IAA9B,EAAoC;AAChCR,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAET,IAAI,CAACU,OAAL,CAAaZ,oBAArB;AAA2Ca,QAAAA,OAAO,EAAEC,QAAQ,CAACG,IAAT,CAAcA;AAAlE,OAAD,CAAR;AACH;AACJ,GARD,CAQE,OAAOE,KAAP,EAAc;AACZT,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAET,IAAI,CAACU,OAAL,CAAaX,oBAArB;AAA2CY,MAAAA,OAAO,EAAEM;AAApD,KAAD,CAAR;AACH;AACJ,CAZM,C,CAcP;;AACA,OAAO,MAAMC,UAAU,GAAIH,IAAD,IAAU,MAAMP,QAAN,IAAkB;AAClD,MAAI;AACAA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAET,IAAI,CAACU,OAAL,CAAaS,wBAArB;AAA+CR,MAAAA,OAAO,EAAE;AAAxD,KAAD,CAAR;AACA,UAAMC,QAAQ,GAAG,MAAMR,KAAK,CAACgB,IAAN,CAAWnB,eAAX,EAA4Bc,IAA5B,EAAkC;AACrDD,MAAAA,OAAO,EAAE;AACL,wBAAgB,kBADX,CAEL;;AAFK;AAD4C,KAAlC,CAAvB;;AAMA,QAAIF,QAAQ,CAACG,IAAT,CAAcC,OAAd,KAA0B,IAA9B,EAAoC;AAChCR,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAET,IAAI,CAACU,OAAL,CAAaW,uBAArB;AAA8CV,QAAAA,OAAO,EAAEC,QAAQ,CAACG,IAAT,CAAcA;AAArE,OAAD,CAAR;AACAZ,MAAAA,mBAAmB,CAACa,OAApB,CAA4BJ,QAAQ,CAACG,IAAT,CAAcO,OAA1C,EAAmD,gBAAnD;AACH,KAHD,MAGO;AACHnB,MAAAA,mBAAmB,CAACc,KAApB,CAA0BL,QAAQ,CAACG,IAAT,CAAcO,OAAxC,EAAiD,sBAAjD;AACH;AACJ,GAdD,CAcE,OAAOL,KAAP,EAAc;AACZT,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAET,IAAI,CAACU,OAAL,CAAaa,uBAArB;AAA8CZ,MAAAA,OAAO,EAAEM;AAAvD,KAAD,CAAR;AACH;AACJ,CAlBM","sourcesContent":["export const POST_PRODUCTS_REQUEST   = 'POST_PRODUCTS_REQUEST';\nexport const GET_PRODUCTS_SUCCESS    = 'GET_PRODUCTS_SUCCESS';\nexport const GET_PRODUCTS_FAILURE    = 'GET_PRODUCTS_FAILURE';\n\nimport {Type} from './type';\nimport { URL_ADD_PRODUCT,URL_PRODUCTS } from '../constants/index';\nimport { NotificationManager } from 'react-notifications';\nimport axios from 'axios';\n\n\n\n// Get products actions.\nexport const getProducts = (userData, history) => async dispatch => {\n    try {\n        dispatch({ type: Type.product.POST_PRODUCTS_REQUEST, payload: true });\n        const response = await axios.get(URL_PRODUCTS, userData, {\n            headers: { 'Content-Type': 'application/json' }\n        });\n        if (response.data.success === true) {\n            dispatch({ type: Type.product.GET_PRODUCTS_SUCCESS, payload: response.data.data });\n        }\n    } catch (error) {\n        dispatch({ type: Type.product.GET_PRODUCTS_FAILURE, payload: error });\n    }\n};\n\n// Add product.\nexport const addProduct = (data) => async dispatch => {\n    try {\n        dispatch({ type: Type.product.POST_ADD_PRODUCT_REQUEST, payload: true });\n        const response = await axios.post(URL_ADD_PRODUCT, data, {\n            headers: { \n                'Content-Type': 'application/json',\n                //'access-token': reactLocalStorage.get('access-token')\n            }\n        });\n        if (response.data.success === true) {\n            dispatch({ type: Type.product.GET_ADD_PRODUCT_SUCCESS, payload: response.data.data });\n            NotificationManager.success(response.data.message, 'Product Added.');\n        } else {\n            NotificationManager.error(response.data.message, 'Something was wrong.');\n        }\n    } catch (error) {\n        dispatch({ type: Type.product.GET_ADD_PRODUCT_FAILURE, payload: error });\n    }\n}"]},"metadata":{},"sourceType":"module"}