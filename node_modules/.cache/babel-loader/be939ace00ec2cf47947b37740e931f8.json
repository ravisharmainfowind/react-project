{"ast":null,"code":"import { POST_PRODUCTS_REQUEST, GET_PRODUCTS_SUCCESS, GET_PRODUCTS_FAILURE, POST_ADD_PRODUCT_REQUEST, GET_ADD_PRODUCT_SUCCESS, GET_ADD_PRODUCT_FAILURE } from './type';\nimport { URL_ADD_PRODUCT, URL_PRODUCTS } from '../constants/index';\nimport { NotificationManager } from 'react-notifications';\nimport axios from 'axios'; // Get products actions.\n\nexport const getProducts = () => async dispatch => {\n  try {\n    dispatch({\n      type: POST_PRODUCTS_REQUEST,\n      payload: true\n    });\n    const response = await axios.get(URL_PRODUCTS, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n\n    if (response.data.success === true) {\n      dispatch({\n        type: GET_PRODUCTS_SUCCESS,\n        payload: response.data\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: GET_PRODUCTS_FAILURE,\n      payload: error\n    });\n  }\n}; // Add product.\n\nexport const addProduct = data => async dispatch => {\n  try {\n    dispatch({\n      type: POST_ADD_PRODUCT_REQUEST,\n      payload: true\n    });\n    const response = await axios.post(URL_ADD_PRODUCT, data, {\n      headers: {\n        'Content-Type': 'application/json' //'access-token': reactLocalStorage.get('access-token')\n\n      }\n    });\n\n    if (response.data.success === true) {\n      dispatch({\n        type: GET_ADD_PRODUCT_SUCCESS,\n        payload: response.data.data\n      });\n      NotificationManager.success(response.data.message, 'Product Added.');\n    } else {\n      NotificationManager.error(response.data.message, 'Something was wrong.');\n    }\n  } catch (error) {\n    dispatch({\n      type: GET_ADD_PRODUCT_FAILURE,\n      payload: error\n    });\n  }\n};","map":{"version":3,"sources":["/opt/lampp/htdocs/react-dashboard-master/src/actions/products.js"],"names":["POST_PRODUCTS_REQUEST","GET_PRODUCTS_SUCCESS","GET_PRODUCTS_FAILURE","POST_ADD_PRODUCT_REQUEST","GET_ADD_PRODUCT_SUCCESS","GET_ADD_PRODUCT_FAILURE","URL_ADD_PRODUCT","URL_PRODUCTS","NotificationManager","axios","getProducts","dispatch","type","payload","response","get","headers","data","success","error","addProduct","post","message"],"mappings":"AAAA,SAAQA,qBAAR,EAA8BC,oBAA9B,EAAmDC,oBAAnD,EACQC,wBADR,EACiCC,uBADjC,EACyDC,uBADzD,QAEO,QAFP;AAGA,SAASC,eAAT,EAAyBC,YAAzB,QAA6C,oBAA7C;AACA,SAASC,mBAAT,QAAoC,qBAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,OAAO,MAAMC,WAAW,GAAG,MAAM,MAAMC,QAAN,IAAkB;AAC/C,MAAI;AACAA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEZ,qBAAR;AAA+Ba,MAAAA,OAAO,EAAE;AAAxC,KAAD,CAAR;AACA,UAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,GAAN,CAAUR,YAAV,EAAwB;AAC3CS,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB;AADkC,KAAxB,CAAvB;;AAGA,QAAIF,QAAQ,CAACG,IAAT,CAAcC,OAAd,KAA0B,IAA9B,EAAoC;AAChCP,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAEX,oBAAR;AAA8BY,QAAAA,OAAO,EAAEC,QAAQ,CAACG;AAAhD,OAAD,CAAR;AACH;AACJ,GARD,CAQE,OAAOE,KAAP,EAAc;AACZR,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEV,oBAAR;AAA8BW,MAAAA,OAAO,EAAEM;AAAvC,KAAD,CAAR;AACH;AACJ,CAZM,C,CAcP;;AACA,OAAO,MAAMC,UAAU,GAAIH,IAAD,IAAU,MAAMN,QAAN,IAAkB;AAClD,MAAI;AACAA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAET,wBAAR;AAAkCU,MAAAA,OAAO,EAAE;AAA3C,KAAD,CAAR;AACA,UAAMC,QAAQ,GAAG,MAAML,KAAK,CAACY,IAAN,CAAWf,eAAX,EAA4BW,IAA5B,EAAkC;AACrDD,MAAAA,OAAO,EAAE;AACL,wBAAgB,kBADX,CAEL;;AAFK;AAD4C,KAAlC,CAAvB;;AAMA,QAAIF,QAAQ,CAACG,IAAT,CAAcC,OAAd,KAA0B,IAA9B,EAAoC;AAChCP,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAER,uBAAR;AAAiCS,QAAAA,OAAO,EAAEC,QAAQ,CAACG,IAAT,CAAcA;AAAxD,OAAD,CAAR;AACAT,MAAAA,mBAAmB,CAACU,OAApB,CAA4BJ,QAAQ,CAACG,IAAT,CAAcK,OAA1C,EAAmD,gBAAnD;AACH,KAHD,MAGO;AACHd,MAAAA,mBAAmB,CAACW,KAApB,CAA0BL,QAAQ,CAACG,IAAT,CAAcK,OAAxC,EAAiD,sBAAjD;AACH;AACJ,GAdD,CAcE,OAAOH,KAAP,EAAc;AACZR,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEP,uBAAR;AAAiCQ,MAAAA,OAAO,EAAEM;AAA1C,KAAD,CAAR;AACH;AACJ,CAlBM","sourcesContent":["import {POST_PRODUCTS_REQUEST,GET_PRODUCTS_SUCCESS,GET_PRODUCTS_FAILURE,\n        POST_ADD_PRODUCT_REQUEST,GET_ADD_PRODUCT_SUCCESS,GET_ADD_PRODUCT_FAILURE\n} from './type';\nimport { URL_ADD_PRODUCT,URL_PRODUCTS } from '../constants/index';\nimport { NotificationManager } from 'react-notifications';\nimport axios from 'axios';\n\n// Get products actions.\nexport const getProducts = () => async dispatch => {\n    try {\n        dispatch({ type: POST_PRODUCTS_REQUEST, payload: true });\n        const response = await axios.get(URL_PRODUCTS, {\n            headers: { 'Content-Type': 'application/json' }\n        });\n        if (response.data.success === true) {\n            dispatch({ type: GET_PRODUCTS_SUCCESS, payload: response.data });\n        }\n    } catch (error) {\n        dispatch({ type: GET_PRODUCTS_FAILURE, payload: error });\n    }\n};\n\n// Add product.\nexport const addProduct = (data) => async dispatch => {\n    try {\n        dispatch({ type: POST_ADD_PRODUCT_REQUEST, payload: true });\n        const response = await axios.post(URL_ADD_PRODUCT, data, {\n            headers: { \n                'Content-Type': 'application/json',\n                //'access-token': reactLocalStorage.get('access-token')\n            }\n        });\n        if (response.data.success === true) {\n            dispatch({ type: GET_ADD_PRODUCT_SUCCESS, payload: response.data.data });\n            NotificationManager.success(response.data.message, 'Product Added.');\n        } else {\n            NotificationManager.error(response.data.message, 'Something was wrong.');\n        }\n    } catch (error) {\n        dispatch({ type: GET_ADD_PRODUCT_FAILURE, payload: error });\n    }\n}"]},"metadata":{},"sourceType":"module"}